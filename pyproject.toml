# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "apache-airflow"
description = "Programmatically author, schedule and monitor data pipelines"
readme = "generated/PYPI_README.md"
authors = [
    {name="Apache Software Foundation", email="dev@airflow.apache.org"},
]
maintainers = [
    {name="Apache Software Foundation", email="dev@airflow.apache.org"},
]
keywords = [ "airflow-provider", "{{ PROVIDER_ID }}", "airflow", "integration" ]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Framework :: Apache Airflow",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: System :: Monitoring",
]
# Mainly because of distutils deprecation and some packages not being compatible with it, we should
# Limit airflow to < 3.12 until those dependencies are ready and until we can support Python 3.12
requires-python = "~=3.8,3.12"

#####################################################################################################
# IMPORTANT NOTE!!!!!!!!!!!!!!!
# IF you are removing dependencies from this list, please make sure that you also increase
# DEPENDENCIES_EPOCH_NUMBER in the Dockerfile.ci
#####################################################################################################
dependencies = [
    # Alembic is important to handle our migrations in predictable and performant way. It is developed
    # together with SQLAlchemy. Our experience with Alembic is that it very stable in minor version
    "alembic>=1.6.3, <2.0",
    "argcomplete>=1.10",
    "asgiref",
    "attrs>=22.1.0",
    "blinker",
    # Colorlog 6.x merges TTYColoredFormatter into ColoredFormatter, breaking backwards compatibility with 4.x
    # Update CustomTTYColoredFormatter to remove
    "colorlog>=4.0.2, <5.0",
    "configupdater>=3.1.1",
    # `airflow/www/extensions/init_views` imports `connexion.decorators.validation.RequestBodyValidator`
    # connexion v3 has refactored the entire module to middleware, see: /spec-first/connexion/issues/1525
    # Specifically, RequestBodyValidator was removed in: /spec-first/connexion/pull/1595
    # The usage was added in #30596, seemingly only to override and improve the default error message.
    # Either revert that change or find another way, preferably without using connexion internals.
    # This limit can be removed after https://github.com/apache/airflow/issues/35234 is fixed
    "connexion[flask]>=2.10.0,<3.0",
    "cron-descriptor>=1.2.24",
    "croniter>=0.3.17",
    "cryptography>=0.9.3",
    "deprecated>=1.2.13",
    "dill>=0.2.2",
    # Flask 2.3 is scheduled to introduce a number of deprecation removals - some of them might be breaking
    # for our dependencies - notably `_app_ctx_stack` and `_request_ctx_stack` removals.
    # We should remove the limitation after 2.3 is released and our dependencies are updated to handle it
    "flask>=2.2,<2.3",
    # We are tightly coupled with FAB version because we vendored in part of FAB code related to security manager
    # This is done as part of preparation to removing FAB as dependency, but we are not ready for it yet
    # Every time we update FAB version here, please make sure that you review the classes and models in
    # `airflow/www/fab_security` with their upstream counterparts. In particular, make sure any breaking changes,
    # for example any new methods, are accounted for.
    # NOTE! When you change the value here, you also have to update flask-appbuilder[oauth] in setup.py
    "flask-appbuilder==4.3.9",
    "flask-caching>=1.5.0",
    "flask-login>=0.6.2",
    "flask-session>=0.4.0",
    "flask-wtf>=0.15",
    "fsspec>=2023.9.2",
    "google-re2>=1.0",
    "graphviz>=0.12",
    "gunicorn>=20.1.0",
    "httpx",
    "importlib_metadata>=1.7; python_version<'3.9'",
    "importlib_resources>=5.2; python_version<'3.9'",
    "itsdangerous>=2.0",
    "jinja2>=3.0.0",
    "jsonschema>=4.18.0",
    "lazy-object-proxy",
    "linkify-it-py>=2.0.0",
    "lockfile>=0.12.2",
    "markdown>=3.0",
    "markdown-it-py>=2.1.0",
    "markupsafe>=1.1.1",
    "marshmallow-oneofschema>=2.0.1",
    "mdit-py-plugins>=0.3.0",
    "opentelemetry-api>=1.15.0",
    "opentelemetry-exporter-otlp",
    "packaging>=14.0",
    "pathspec>=0.9.0",
    # When (if) pendulum 3 released it would introduce changes in module/objects imports,
    # since we are tightly coupled with pendulum library internally it will breaks Airflow functionality.
    "pendulum>=2.0,<3.0",
    "pluggy>=1.0",
    "psutil>=4.2.0",
    # We should bump it to at least pydantic>=2.3.0 when we prepare Airflow 2.8.0 release
    # we keep Pydantic < 1 for compatibility with packages that depend on Pydantic 1
    # We should also remove then `filterwarning` for pydantic from airflow/configuration.py
    # and # Pydantic v1 check in airflow/serialization/serde.py
    "pydantic>=1.10.0",
    "pygments>=2.0.1",
    "pyjwt>=2.0.0",
    "python-daemon>=3.0.0",
    "python-dateutil>=2.3",
    "python-nvd3>=0.15.0",
    "python-slugify>=5.0",
    "rfc3339_validator>=0.1.4",
    "rich>=12.4.4",
    "rich-argparse>=1.0.0",
    "setproctitle>=1.1.8",
    # We use some deprecated features of sqlalchemy 2.0 and we should replace them before we can upgrade
    # See https://sqlalche.me/e/b8d9 for details of deprecated features
    # you can set environment variable SQLALCHEMY_WARN_20=1 to show all deprecation warnings.
    # The issue tracking it is https://github.com/apache/airflow/issues/28723
    "sqlalchemy>=1.4.28,<2.0",
    "sqlalchemy_jsonfield>=1.0",
    "tabulate>=0.7.5",
    "tenacity>=6.2.0,!=8.2.0",
    "termcolor>=1.1.0",
    "typing-extensions>=4.0.0",
    # We should remove this dependency when Providers are limited to Airflow 2.7+
    # as we replaced the usage of unicodecsv with csv in Airflow 2.7
    # See https://github.com/apache/airflow/pull/31693
    # We should also remove "licenses/LICENSE-unicodecsv.txt" file when we remove this dependency
    "unicodecsv>=0.14.1",
    "werkzeug>=2.0",
]
dynamic = ["version"]


[project.urls]
"Documentation" = "https://airflow.apache.org/docs/"
"Downloads" = "https://archive.apache.org/dist/airflow/"
"Release Notes" = "https://airflow.apache.org/docs/apache-airflow/stable/release_notes.html"
"Bug Tracker" = "https://github.com/apache/airflow/issues"
"Source Code" = "https://github.com/apache/airflow"
"Slack Chat" = "https://s.apache.org/airflow-slack"
"Twitter" = "https://twitter.com/ApacheAirflow"
"YouTube" = "https://www.youtube.com/channel/UCSXwxpWZQ7XZ1WL3wqevChA/"

[project.entry-points."console_scripts="]
airflow = "=airflow.__main__:main"

[project.optional-dependencies]

# NOTE! IN Airflow 2.4.+ dependencies for providers are maintained in `provider.yaml` files for each
# provider separately. Before, the provider dependencies were kept here. THEY ARE NOT HERE ANYMORE.
#
# 'Start dependencies group' and 'End dependencies group' are marks for ./scripts/ci/check_order_setup.py
# If you change these marks you should also change ./scripts/ci/check_order_setup.py
# Start dependencies group
async_packages = [
    "eventlet>=0.33.3",
    "gevent>=0.13",
    "greenlet>=0.4.9",
]
atlas = [
    "atlasclient>=0.1.2",
]
celery = [
    # The Celery is known to introduce problems when upgraded to a MAJOR version. Airflow Core
    # Uses Celery for CeleryExecutor, and we also know that Kubernetes Python client follows SemVer
    # (https://docs.celeryq.dev/en/stable/contributing.html?highlight=semver#versions).
    # This is a crucial component of Airflow, so we should limit it to the next MAJOR version and only
    # deliberately bump the version when we tested it, and we know it can be bumped.
    # Bumping this version should also be connected with
    # limiting minimum airflow version supported in celery provider due to the
    # potential breaking changes in Airflow Core as well (celery is added as extra, so Airflow
    # core is not hard-limited via install-requires, only by extra).
    "celery>=5.3.0,<6"
]
cgroups = [
    # Cgroupspy 0.2.2 added Python 3.10 compatibility
    "cgroupspy>=0.2.2",
]
dask = [
    # Dask support is limited, we need Dask team to upgrade support for dask if we were to continue
    # Supporting it in the future
    "cloudpickle>=1.4.1",
    # Dask and distributed in version 2023.5.0 break our tests for Python > 3.7
    # See https://github.com/dask/dask/issues/10279
    "dask>=2.9.0,!=2022.10.1,!=2023.5.0",
    "distributed>=2.11.1,!=2023.5.0",
]
deprecated_api = [
    "requests>=2.26.0",
]
doc = [
    # sphinx-autoapi fails with astroid 3.0, see: https://github.com/readthedocs/sphinx-autoapi/issues/407
    # This was fixed in sphinx-autoapi 3.0, however it has requirement sphinx>=6.1, but we stuck on 5.x
    "astroid>=2.12.3, <3.0",
    "checksumdir",
    # click 8.1.4 and 8.1.5 generate mypy errors due to typing issue in the upstream package:
    # https://github.com/pallets/click/issues/2558
    "click>=8.0,!=8.1.4,!=8.1.5",
    # Docutils 0.17.0 converts generated <div class="section"> into <section> and breaks our doc formatting
    # By adding a lot of whitespace separation. This limit can be lifted when we update our doc to handle
    # <section> tags for sections
    "docutils<0.17.0",
    "eralchemy2",
    "sphinx-airflow-theme",
    "sphinx-argparse>=0.1.13",
    "sphinx-autoapi>=2.0.0",
    "sphinx-copybutton",
    "sphinx-jinja>=2.0",
    "sphinx-rtd-theme>=0.1.6",
    "sphinx>=5.2.0",
    "sphinxcontrib-httpdomain>=1.7.0",
    "sphinxcontrib-redoc>=1.6.0",
    "sphinxcontrib-spelling>=7.3",
]
doc_gen = [
    "eralchemy2",
]
flask_appbuilder_oauth = [
    "authlib>=1.0.0",
    # The version here should be upgraded at the same time as flask-appbuilder in setup.cfg
    "flask-appbuilder[oauth]==4.3.9",
]
kerberos = [
    "pykerberos>=1.1.13",
    "requests_kerberos>=0.10.0",
    "thrift_sasl>=0.2.0",
]
kubernetes = [
    # The Kubernetes API is known to introduce problems when upgraded to a MAJOR version. Airflow Core
    # Uses Kubernetes for Kubernetes executor, and we also know that Kubernetes Python client follows SemVer
    # (https://github.com/kubernetes-client/python#compatibility). This is a crucial component of Airflow
    # So we should limit it to the next MAJOR version and only deliberately bump the version when we
    # tested it, and we know it can be bumped. Bumping this version should also be connected with
    # limiting minimum airflow version supported in cncf.kubernetes provider, due to the
    # potential breaking changes in Airflow Core as well (kubernetes is added as extra, so Airflow
    # core is not hard-limited via install-requires, only by extra).
    "cryptography>=2.0.0",
    "kubernetes>=21.7.0,<24",
]
ldap = [
    "ldap3>=2.5.1",
    "python-ldap",
]
leveldb = ["plyvel"]
otel = ["opentelemetry-exporter-prometheus"]
pandas = ["pandas>=0.17.1", "pyarrow>=9.0.0"]
password = [
    "bcrypt>=2.0.0",
    "flask-bcrypt>=0.7.1",
]
rabbitmq = [
    "amqp",
]
sentry = [
    "blinker>=1.1",
    # Sentry SDK 1.33 is broken when greenlets are installed and fails to import
    # See https://github.com/getsentry/sentry-python/issues/2473
    "sentry-sdk>=1.32.0,!=1.33.0",
]
statsd = [
    "statsd>=3.3.0",
]
virtualenv = [
    "virtualenv",
]
webhdfs = [
    "hdfs[avro,dataframe,kerberos]>=2.0.4",
]
# End dependencies group

# Mypy 0.900 and above ships only with stubs from stdlib so if we need other stubs, we need to install them
# manually as `types-*`. See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
# for details. We want to install them explicitly because we want to eventually move to
# mypyd which does not support installing the types dynamically with --install-types
mypy_dependencies = [
    # TODO: upgrade to newer versions of MyPy continuously as they are released
    # Make sure to upgrade the mypy version in update-common-sql-api-stubs in .pre-commit-config.yaml
    # when you upgrade it here !!!!
    "mypy==1.2.0",
    "types-aiofiles",
    "types-certifi",
    "types-croniter",
    "types-Deprecated",
    "types-docutils",
    "types-paramiko",
    "types-protobuf",
    "types-python-dateutil",
    "types-python-slugify",
    "types-pytz",
    "types-redis",
    "types-requests",
    "types-setuptools",
    "types-termcolor",
    "types-tabulate",
    "types-toml",
    "types-Markdown",
    "types-PyMySQL",
    "types-PyYAML",
]

# Dependencies needed for development only
devel_only = [
    # devel_only_amazon
    "aws_xray_sdk",
    "moto[cloudformation,glue]>=4.2.5",
    "mypy-boto3-rds>=1.28.0",
    "mypy-boto3-redshift-data>=1.28.0",
    "mypy-boto3-s3>=1.28.0",
    "mypy-boto3-appflow>=1.28.0",
    # devel_only_azure,
    "pywinrm",
    # devel_only_breeze
    "filelock",
    # devel_only_debuggers
    "ipdb",
    # devel_only_deltalake
    "deltalake>=0.12.0",
    # devel_only_devscripts
    "click>=8.0",
    "gitpython",
    "pipdeptree",
    "pygithub",
    "rich-click>=1.7.0",
    "restructuredtext-lint",
    "semver",
    "towncrier",
    "twine",
    "wheel",
    # devel_only_duckdb
    "duckdb>=0.9.0",
    # devel_only_mongo
    "mongomock",
    # devel_only_iceberg
    "pyiceberg>=0.5.0",
    # devel_only_sentry
    "blinker",
    # devel_only_static_checks
    "pre-commit",
    "black",
    "ruff>=0.0.219",
    "yamllint",
    # devel only tests
    "aioresponses",
    "backports.zoneinfo>=0.2.1;python_version<'3.9'",
    "beautifulsoup4>=4.7.1",
    "coverage>=7.2",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-httpx",
    "pytest-icdiff",
    "pytest-instafail",
    "pytest-mock",
    "pytest-rerunfailures",
    "pytest-timeouts",
    "pytest-xdist",
    "requests_mock",
    "time-machine",
]

aiobotocore = [
    # This required for AWS deferrable operators.
    # There is conflict between boto3 and aiobotocore dependency botocore.
    # TODO: We can remove it once boto3 and aiobotocore both have compatible botocore version or
    # boto3 have native aync support and we move away from aio aiobotocore
    "aiobotocore>=2.1.1",
]

s3fs = [
    # This is required for support of S3 file system which uses aiobotocore
    # which can have a conflict with boto3 as mentioned above
    "s3fs>=2023.9.2",
]



# THIS WHOLE SECTION IS GENERATED AUTOMATICALLY BY PRE-COMMIT
# DO NOT MODIFY THOSE FILES MANUALLY - THEY WILL BE OVERWRITTEN

# START GENERATED COMBINED EXTRAS


# END GENERATED COMBINED EXTRAS

# START GENERATED DEPRECATED ALIASES

# END GENERATED DEPRECATED ALIASES

# START GENERATED PROVIDER DEPENDENCIES FROM provider.yaml FILES - EDIT THEM THERE

# END GENERATED PROVIDER DEPENDENCIES FROM provider.yaml FILES - EDIT THEM THERE


[tool.flit.module]
name = "airflow"

[tool.black]
line-length = 110
target-version = ['py38', 'py39', 'py310', 'py311']

[tool.ruff]
target-version = "py38"
typing-modules = ["airflow.typing_compat"]
line-length = 110
extend-exclude = [
    ".eggs",
    "airflow/_vendor/*",
    "airflow/providers/google/ads/_vendor/*",
    # The files generated by stubgen aren't 100% valid syntax it turns out, and we don't ship them, so we can
    # ignore them in ruff
    "airflow/providers/common/sql/*/*.pyi",
    "airflow/migrations/versions/*.py",
    "tests/dags/test_imports.py",
]

extend-select = [
    "I", # Missing required import (auto-fixable)
    "UP", # Pyupgrade
    "RUF100", # Unused noqa (auto-fixable)

    # We ignore more pydocstyle than we enable, so be more selective at what we enable
    "D101",
    "D106",
    "D2",
    "D3",
    "D400",
    # "D401", # Not enabled by ruff, but we don't want it
    "D402",
    "D403",
    "D412",
    "D419",
    "TCH",  # Rules around TYPE_CHECKING blocks
    "TID251",  # Specific modules or module members that may not be imported or accessed
    "TID253",  # Ban certain modules from being imported at module level
]
extend-ignore = [
    "D203",
    "D212",
    "D213",
    "D214",
    "D215",
    "E731",
    "TCH003",  # Do not move imports from stdlib to TYPE_CHECKING block
]

namespace-packages = ["airflow/providers"]

[tool.pytest.ini_options]
# * Disable `flaky` plugin for pytest. This plugin conflicts with `rerunfailures` because provide same marker.
# * Disable `nose` builtin plugin for pytest. This feature deprecated in 7.2 and will be removed in pytest>=8
# * And we focus on use native pytest capabilities rather than adopt another frameworks.
addopts = "-rasl --verbosity=2 -p no:flaky -p no:nose --asyncio-mode=strict"
norecursedirs = [
    ".eggs",
    "airflow",
    "tests/dags_with_system_exit",
    "tests/test_utils",
    "tests/dags_corrupted",
    "tests/dags",
    "tests/system/providers/google/cloud/dataproc/resources",
    "tests/system/providers/google/cloud/gcs/resources",
]
log_level = "INFO"
filterwarnings = [
    "error::pytest.PytestCollectionWarning",
    "ignore::DeprecationWarning:flask_appbuilder.filemanager",
    "ignore::DeprecationWarning:flask_appbuilder.widgets",
    # https://github.com/dpgaspar/Flask-AppBuilder/pull/1940
    "ignore::DeprecationWarning:flask_sqlalchemy",
    # https://github.com/dpgaspar/Flask-AppBuilder/pull/1903
    "ignore::DeprecationWarning:apispec.utils",
]
python_files = [
    "test_*.py",
    "example_*.py",
]
testpaths = [
    "tests",
]

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true

[tool.ruff.per-file-ignores]
"airflow/models/__init__.py" = ["F401", "TCH004"]
"airflow/models/sqla_models.py" = ["F401"]

# The test_python.py is needed because adding __future__.annotations breaks runtime checks that are
# needed for the test to work
"tests/decorators/test_python.py" = ["I002"]

# The Pydantic representations of SqlAlchemy Models are not parsed well with Pydantic
# when __future__.annotations is used so we need to skip them from upgrading
# Pydantic also require models to be imported during execution
"airflow/serialization/pydantic/*.py" = ["I002", "UP007", "TCH001"]

# Ignore pydoc style from these
"*.pyi" = ["D"]
"scripts/*" = ["D"]
"docs/*" = ["D"]
"provider_packages/*" = ["D"]
"*/example_dags/*" = ["D"]
"chart/*" = ["D"]
# In addition ignore top level imports, e.g. pandas, numpy in tests and dev
"dev/*" = ["D", "TID253"]
"tests/*" = ["D", "TID253"]
"docker_tests/*" = ["D", "TID253"]
"kubernetes_tests/*" = ["D", "TID253"]

# All of the modules which have an extra license header (i.e. that we copy from another project) need to
# ignore E402 -- module level import not at top level
"airflow/api/auth/backend/kerberos_auth.py" = ["E402"]
"airflow/security/kerberos.py" = ["E402"]
"airflow/security/utils.py" = ["E402"]
"tests/providers/elasticsearch/log/elasticmock/__init__.py" = ["E402"]
"tests/providers/elasticsearch/log/elasticmock/utilities/__init__.py" = ["E402"]

[tool.ruff.flake8-tidy-imports.banned-api]
"airflow.AirflowException".msg = "Use airflow.exceptions.AirflowException instead."
"airflow.Dataset".msg = "Use airflow.datasets.Dataset instead."

[tool.ruff.flake8-tidy-imports]
# Ban certain modules from being imported at module level, instead requiring
# that they're imported lazily (e.g., within a function definition).
banned-module-level-imports = ["numpy", "pandas"]

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.coverage.run]
branch = true
relative_files = true
source = ["airflow"]
omit = [
    "airflow/_vendor/**",
    "airflow/contrib/**",
    "airflow/example_dags/**",
    "airflow/migrations/**",
    "airflow/providers/**/example_dags/**",
    "airflow/www/node_modules/**",
    "airflow/providers/google/ads/_vendor/**",
]

[tool.coverage.report]
skip_empty = true
exclude_also = [
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "@(typing(_extensions)?\\.)?overload",
    "if (typing(_extensions)?\\.)?TYPE_CHECKING:"
]


[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
pretty = true
show_error_codes = true
# Mypy since 0.991 warns about type annotations being present in an untyped
# function since they are not checked and technically meaningless.
# Ideally we should make them meaningful by setting check_untyped_defs = true,
# but there are too many issues in those currently unchecked functions to make
# it viable in the short term, so this error is simply ignored for now.
disable_error_code = "annotation-unchecked"

[tool.mypy.airflow.config_templates.default_webserver_config]
# This file gets written to user installs, so lets not litter it with type comments
disable_error_code = "var-annotated"

[tool.mypy.airflow.migrations."*"]
ignore_errors = true

# Let's assume all google.cloud packages have implicit optionals
# Most of them don't but even if they do, it does not matter
[tool.mypy.google.cloud."*"]
no_implicit_optional = false

# Let's assume all azure packages have implicit optionals
[tool.mypy.azure."*"]
no_implicit_optional = false
